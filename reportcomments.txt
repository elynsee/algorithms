Code is correct but does not strictly follow the notebook provided (instrumentation code is split over different cells). Good commenting throughout. Readability could be improved by means of docstring.

 

GS: the choice of heapsort is very strange, since you do not have streaming data in input. A much better choice would have been merge / tim sort (in fact your running time is higher than if you were to use these other sorting algorithms, since the hidden constants behind heapsort are bigger). EGS: good choice of heuristic but implementation is a bit of a mess since interior point elimination always returns true).  

 

JM:  theoretical analysis correct but not very detailed (it would have been better to specify the cost of different sub-parts of the algorithm, then explain how they lead to the overall OOG). Good to repeat 5 times and take mean; also good to scatterplot each repeat, to show dispersion between each run. Experimentally, you could have compared your best-fit line with both a linear and a linearithmic trend, and observe whether, in practice, nh is closer to n or n log n (i.e., is h ~ log N on random inputs?). Worst case: theoretical analysis correct but note that the circle is not the only geometry that induces it. Also, experimentally your best fit line is wrong (you should have tried fitting a quadratic curve given that that was also your theoretical expectation - the plotted red line does not fit your experimental data at all). GS: correct theoretical analysis and more detailed than JM. Experimentally, again it seems you visually tried to fit exec times against a linear (as opposed to an expected linearithmic) trend - your red lines appear misleading. For worst case, there is no information at all about how it has been engineered - what geometry should points have to induce this maximum number of operations in practice? EGS: theoretical analysis correct. Experimentally, you could have better explained why EGS is slower than GS in the worst case (i.e., this should be expected, since the pre-processing point elimination step has a cost proportional to n, and leads to no point reduction, so it is pure overhead compared to GS).